package org.uom.fyp.engine

import org.uom.fyp.engine.StreetType.StreetType

/**
 * Applies operations over streets.
 * @param streetName The name of the street.
 * @param sType The type of the street.
 * @param len The length of the street.
 * @param vehicles The number of vehicles in the street.
 * @param lanes The number of lanes the street has.
 */
class Street(streetName: String, sType: StreetType, len: Double, vehicles: Int, arrivalRate: Double, lanes: Int = 1) {

  /**
   * Stores edges that are generated by <b>addStreet()</b>.
   */
  private var e: Array[Edge] = Array()

  /**
   * Returns the name of the street.
   */
  def name = streetName

  /**
   * Returns the type of the street.
   */
  def streetType = sType

  /**
   * Returns the length of the street.
   */
  def length = len

  def noOfVehicles = vehicles

  /**
   * Returns the number of lanes the street has.
   */
  def noOfLanes = lanes

  /**
   * Returns the average speed in this street.
   */
  def speed = {
    edges.map((edge: Edge) => edge.length).sum / edges.map((edge: Edge) => edge.time).sum
  }

  /**
   * Adds an edge to the list in order to be added to the graph later on.
   * @param otherAttachedAt The point where the attachment takes place.
   * @param nextOtherAttachedAt The next point where the attachment takes place.
   *                            Defaults to the length of the context length if
   *                            omitted.
   * @return The edge that has been created and added to the graph.
   */
  def addEdge(otherAttachedAt: Double, nextOtherAttachedAt: Double = len): Edge = {
    if (nextOtherAttachedAt > len) {
      throw new StreetLengthExceededException(nextOtherAttachedAt)
    }

    val edge: Edge = new Edge
    edge.intersectionPoint_(nextOtherAttachedAt)
    edge.length_((nextOtherAttachedAt - otherAttachedAt).abs)
    edge.streetName_(streetName)
    e = e ++ Array(edge)

    edge
  }

  /**
   * Returns a list containing the edges in this street (generated due to
   * intersections).
   */
  def edges = e

  /**
   * Initializes values to be used during simulation.
   */
  def initialize() = {
    var arrRate = arrivalRate
    e.foreach((edge: Edge) => {
      edge.noOfVehicles_(vehicles)
      edge.arrivalRate_(arrRate)
      arrRate = edge.departureRate
    })
  }

  /**
   * Prepares for the creation of a crossroad with the specified street, at the specified points of
   * intersection.
   * @param thisAt Point on the context street where the intersection occurs.
   * @param that The other street object to be involved in this crossroads intersection.
   * @param thatAt Point on the other street where the intersection occurs.
   */
  def createCrossroads(thisAt: Double, that: Street, thatAt: Double) = {

  }

  /**
   * Creates and attaches an outgoing street to the context street.
   * @param network The network where the street will be attached.
   * @param streetName The name of the street to be attached.
   * @param streetType The type of the street to be attached.
   * @param length The length the street to be attached.
   * @param point The point where the street is to be attached with respect to
   *              the starting point of the other.
   * @param vehicles The number of vehicles in the new street.
   * @return The street that has been created.
   */
  def attachStreet(network: RoadNetwork, streetName: String, streetType: StreetType,
                 length: Double, point: Double, vehicles: Int, arrivalRate: Double, lanes: Int = 1): Street = {
    val street: Street = network.addStreet(streetName, streetType, length, vehicles, arrivalRate, lanes)

    var otherAt = 0.0
    val prev: Edge = getEdge(point)
    if (prev != null) {
      otherAt = if (prev.intersectionPoint < len) prev.intersectionPoint + prev.length else 0
      prev.length_((point - prev.intersectionPoint).abs)
    }

    if (point == len && this.e.length != 0) {
      val edge: Edge = addEdge(otherAt)
      edge.streetAtTarget_(street)
    } else if (point == len) {
      val edge: Edge = addEdge(0)
      edge.streetAtTarget_(street)
    } else if (point == 0 && prev != null) {
      prev.streetAtSource_(street)
    } else if (point == 0) {
      val edge: Edge = addEdge(0)
      edge.streetAtSource_(street)
    } else if (point > 0 && point < len) {
      val edge: Edge = addEdge(otherAt, point)
      edge.streetAtTarget_(street)
      edge.otherIntersectionPoint_(0)
      edge.edgeT_(RoadStructure.TJunction)
    }

    street
  }

  /**
   * Creates the last edge in a road by determining the position of the last
   * intersection on that road. This method should be called after all road
   * attachments in the model have taken place upon the context road. In case
   * no attachments have been carried out on the context road, a single edge
   * would be created.
   */
  def createLastEdge() = {
    //Sort edges in order of intersection point.
    e = e.sortWith((e1: Edge, e2: Edge) => e1.intersectionPoint < e2.intersectionPoint)

    if (e.length == 0) {
      addEdge(0, length)
    } else {
      val maxEdgeIntersectionPt = e.maxBy((edge: Edge) => edge.intersectionPoint)
      if (maxEdgeIntersectionPt.intersectionPoint < length) {
        val edge: Edge = addEdge(maxEdgeIntersectionPt.intersectionPoint, length)
      }
    }
  }

  /**
   * Returns the edge on which a given point is found.
   * @param point A point along the road.
   */
  def getEdge(point: Double): Edge = {
    if (e.size > 0) e.minBy((e: Edge) => (point - e.intersectionPoint).abs) else null
  }

  /**
   * Blocks the street.
   * @param network The road network in which the street is found.
   */
  def block(network: RoadNetwork): Unit = {
    e.foreach((edge: Edge) => network.removeEdge(edge))
  }

  /**
   * Prepares for the creation of a roundabout node.
   * @param at Position in the street where to place the roundabout.
   */
  def createRoundabout(at: Double) = {
    val edge: Edge = getEdge(at)
    val oldLength = edge.length
    edge.length_(oldLength - edge.intersectionPoint - at)
    edge.edgeT_(RoadStructure.Roadabout)
    val newEdge: Edge = addEdge(at, oldLength - edge.length)
  }

}
