package org.uom.fyp.engine

import com.perfdynamics.pdq.PDQ
import java.util

/**
 * Contains utility methods that extract values generated by PDQ and transfers
 * them to properties in the actual data structures within the road graph
 * network.
 */
object PDQProperties {

  /**
   * Copies values from properties within the PDQ object to the given road network.
   * @param pdq PDQ object.
   * @param network Road network.
   */
  def pdqNodesToRoadNetwork(pdq: PDQ, network: RoadNetwork) = {
    val p: util.Vector[_] = pdq.p.toVector
    var pdqParametersIndex: Int = 0

    var edges: Array[Edge] = Array()
    edges = network.edgeSet().toArray(edges)
    var index: Int = 0

    for (index <- 0 to edges.length) {
      val edge: Edge = edges.filter((e: Edge) => e.pdqNodeIndex == index)(0)
      pdqParametersIndex = p.indexOf("Throughput", pdqParametersIndex) + 3
      edge.flow = p.elementAt(pdqParametersIndex).asInstanceOf[Int]

      pdqParametersIndex = p.indexOf("Utilization", pdqParametersIndex) + 3


      //pdqParametersIndex = p.indexOf("Queue Length", pdqParametersIndex) + 3


      pdqParametersIndex = p.indexOf("Residence Time", pdqParametersIndex) + 3
    }
  }

}
